local a,b,c=bit32.rshift,bit32.lshift,bit32.band;local d,e=string.byte,string.char;local f,unpack=table.concat,unpack or table.unpack;local g=math.min;local h={17,18,19,1,9,8,10,7,11,6,12,5,13,4,14,3,15,2,16}local i={2,3,7}local j={144,112,24,8}local k={8,9,7,8}local l={[0]=5,261,133,389,69,325,197,453,37,293,165,421,101,357,229,485,21,277,149,405,85,341,213,469,53,309,181,437,117,373,245,501}local m=5;local function n(o,p)o.bits=a(o.bits,p)o.count=o.count-p end;local function q(o,p)local r,s,t,u=o.buffer,o.bits,o.count,o.position;while t<p do if u>#r then return nil end;s=s+b(d(r,u),t)u=u+1;t=t+8 end;o.bits=s;o.position=u;o.count=t;return c(s,b(1,p)-1)end;local function v(o,p)local w=q(o,p)o.bits=a(o.bits,p)o.count=o.count-p;return w end;local function x(o,y,p)local z=y[q(o,p)]if not z then return nil end;local A=c(z,15)local w=a(z,4)o.bits=a(o.bits,A)o.count=o.count-A;return w end;local function B(C)local D=#C;local E,F,y={[0]=0},{},{}local s,G=1,0;for H=1,D do local I=C[H]if I>s then s=I end;E[I]=(E[I]or 0)+1 end;for H=1,s do G=(G+(E[H-1]or 0))*2;F[H]=G end;for H=1,D do local I=C[H]if I>0 then local z=(H-1)*16+I;local J=0;for K=1,I do J=J+b(c(1,a(F[I],K-1)),I-K)end;for K=0,2^s-1,2^I do y[K+J]=z end;F[I]=F[I]+1 end end;return y,s end;local function L(M,o,N,O,P,Q)local R=#M+1;local S;repeat S=x(o,N,O)if not S then return nil end;if S<256 then M[R]=S;R=R+1 elseif S>256 then local s,D,T=0,3,1;if S<265 then D=D+S-257 elseif S<285 then s=a(S-261,2)D=D+b(c(S-261,3)+4,s)else D=258 end;if s>0 then D=D+v(o,s)end;local z=x(o,P,Q)if z<4 then T=T+z else s=a(z-2,1)T=T+b(c(z,1)+2,s)+v(o,s)end;local u=R-T;repeat M[R]=M[u]or 0;R=R+1;u=u+1;D=D-1 until D==0 end until S==256 end;local function U(M,o)local V=v(o,5)if not V then return nil end;local S,T,A=257+V,1+v(o,5),4+v(o,4)local C={}for H=1,A do C[h[H]]=v(o,3)end;for H=A+1,19 do C[h[H]]=0 end;local W,X=B(C)local H=1;local Y=S+T+1;repeat local z=x(o,W,X)if z<16 then C[H]=z;H=H+1 elseif z<19 then local p=i[z-15]local t=0;local Z=3+v(o,p)if z==16 then t=C[H-1]elseif z==18 then Z=Z+8 end;for _=1,Z do C[H]=t;H=H+1 end end until H==Y;local a0,a1={},{}for K=1,S do a0[K]=C[K]end;for K=S+1,#C do a1[#a1+1]=C[K]end;local N,O=B(a0)local P,Q=B(a1)L(M,o,N,O,P,Q)end;local function a2(M,o)local C={}for H=1,4 do local I=k[H]for _=1,j[H]do C[#C+1]=I end end;local N,O=B(C)L(M,o,N,O,l,m)end;local function a3(M,o)n(o,c(o.count,7))local A=v(o,16)v(o,16)if not A then return nil end;local r,u=o.buffer,o.position;for H=u,u+A-1 do M[#M+1]=d(r,H,H)end;o.position=u+A end;return function(a4)local self={buffer=a4,position=1,bits=0,count=0}local a5;do local M,r={},{}local a6,a7;repeat a6,a7=v(self,1),v(self,2)if not a6 or not a7 then break end;a7=a7==0 and a3(M,self)or a7==1 and a2(M,self)or a7==2 and U(M,self)until a6==1;local D=#M;for H=1,D,4096 do r[#r+1]=e(unpack(M,H,g(H+4095,D)))end;a5=f(r)if self.count%8>0 then n(self,self.count%8)end end;return a5 end
