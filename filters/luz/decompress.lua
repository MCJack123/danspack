local a={{":name",{{",",":repeat0"},{"=",{"(",")"}}}},{{{{".",":number"},{":repeat1",":repeat2"}},{{":string","end"},{"local",{":repeat3",":repeat4"}}}},{{{{"if","then"},{{"+","-"},{"0","1"}}},{{{":repeat5",":repeat6"},{"==","["}},{{"]","do"},{"function","return"}}}},{{{{"{","}"},{{"#","*"},{"..","2"}}},{{{":",":repeat7"},{":repeat8","and"}},{{"else","for"},{"nil","or"}}}},{{{{"self","~="},{{"\"\"","/"},{":repeat10",":repeat9"}}},{{{";","<"},{">","elseif"}},{{"false","not"},{"string","true"}}}},{{{{"type",{"%","-1"}},{{"...",":repeat11"},{"<=",">="}}},{{{"error","in"},{"math","os"}},{{"print","sub"},{"table","while"}}}},{{{{{"\"number\"","\"string\""},{"\"table\"",":repeat12"}},{{":repeat13","_"},{"_G","bit32"}}},{{{"break","close"},{"coroutine","find"}},{{"ipairs","match"},{"open","pairs"}}}},{{{{"read","require"},{"setmetatable","tonumber"}},{{"tostring","unpack"},{"write",{"\"function\"","\"nil\""}}}},{{{{"\"r\"","\"w\""},{"^","_ENV"}},{{"__index","debug"},{"getmetatable","gsub"}}},{{{"io","package"},{"pcall","repeat"}},{{"select","until"},{{"\"boolean\"","__newindex"},{"load",{":end","__call"}}}}}}}}}}}}}}local b,c,d=bit32.rshift,bit32.lshift,bit32.band;local e,f=string.byte,string.char;local g,unpack=table.concat,unpack or table.unpack;local h=math.min;local i={17,18,19,1,9,8,10,7,11,6,12,5,13,4,14,3,15,2,16}local j={2,3,7}local k={144,112,24,8}local l={8,9,7,8}local m={[0]=5,261,133,389,69,325,197,453,37,293,165,421,101,357,229,485,21,277,149,405,85,341,213,469,53,309,181,437,117,373,245,501}local n=5;local o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"local p={}for q=1,#o do p[string.char(q-1)]=o:sub(q,q)end;local function r(s,t)s.bits=b(s.bits,t)s.count=s.count-t end;local function u(s,t)local v,w,x,y=s.buffer,s.bits,s.count,s.position;while x<t do if y>#v then return nil end;w=w+c(e(v,y),x)y=y+1;x=x+8 end;s.bits=w;s.position=y;s.count=x;return d(w,c(1,t)-1)end;local function z(s,t)local A=u(s,t)s.bits=b(s.bits,t)s.count=s.count-t;return A end;local function B(s,t)local v,w,x,y=s.buffer,s.bits,s.count,s.position;while x<t do if y>#v then return nil end;w=c(w,8)+e(v,y)y=y+1;x=x+8 end;s.bits=w;s.position=y;s.count=x;return d(b(w,x-t),c(1,t)-1)end;local function C(s,t)local A=B(s,t)s.count=s.count-t;return A end;local function D(s,E,t)local F=E[u(s,t)]if not F then return nil end;local G=d(F,15)local A=b(F,4)s.bits=b(s.bits,G)s.count=s.count-G;return A end;local function H(I)local J=#I;local K,L,E={[0]=0},{},{}local w,M=1,0;for q=1,J do local N=I[q]if N>w then w=N end;K[N]=(K[N]or 0)+1 end;for q=1,w do M=(M+(K[q-1]or 0))*2;L[q]=M end;for q=1,J do local N=I[q]if N>0 then local F=(q-1)*16+N;local O=0;for P=1,N do O=O+c(d(1,b(L[N],P-1)),N-P)end;for P=0,2^w-1,2^N do E[P+O]=F end;L[N]=L[N]+1 end end;return E,w end;local function Q(R,s,S,T,U,V)local W=#R+1;local X;repeat X=D(s,S,T)if not X then return nil end;if X<256 then R[W]=X;W=W+1 elseif X>256 then local w,J,Y=0,3,1;if X<265 then J=J+X-257 elseif X<285 then w=b(X-261,2)J=J+c(d(X-261,3)+4,w)else J=258 end;if w>0 then J=J+z(s,w)end;local F=D(s,U,V)if F<4 then Y=Y+F else w=b(F-2,1)Y=Y+c(d(F,1)+2,w)+z(s,w)end;local y=W-Y;repeat R[W]=R[y]or 0;W=W+1;y=y+1;J=J-1 until J==0 end until X==256 end;local function Z(R,s)local _=z(s,5)if not _ then return nil end;local X,Y,G=257+_,1+z(s,5),4+z(s,4)local I={}for q=1,G do I[i[q]]=z(s,3)end;for q=G+1,19 do I[i[q]]=0 end;local a0,a1=H(I)local q=1;local a2=X+Y+1;repeat local F=D(s,a0,a1)if F<16 then I[q]=F;q=q+1 elseif F<19 then local t=j[F-15]local x=0;local a3=3+z(s,t)if F==16 then x=I[q-1]elseif F==18 then a3=a3+8 end;for a4=1,a3 do I[q]=x;q=q+1 end end until q==a2;local a5,a6={},{}for P=1,X do a5[P]=I[P]end;for P=X+1,#I do a6[#a6+1]=I[P]end;local S,T=H(a5)local U,V=H(a6)Q(R,s,S,T,U,V)end;local function a7(R,s)local I={}for q=1,4 do local N=l[q]for a4=1,k[q]do I[#I+1]=N end end;local S,T=H(I)Q(R,s,S,T,m,n)end;local function a8(R,s)r(s,d(s.count,7))local G=z(s,16)z(s,16)if not G then return nil end;local v,y=s.buffer,s.position;for q=y,y+G-1 do R[#R+1]=e(v,q,q)end;s.position=y+G end;local function a9(s)local a3=0;repeat local _=C(s,8)a3=a3*128+_%128 until _<128;return a3 end;local function aa(s)local type=C(s,2)if type>=2 then local ab=C(s,1)local ac=0;repeat local _=C(s,4)ac=c(ac,3)+d(_,7)until _<8;if ab==1 then ac=-ac end;local ad=a9(s)/0x20000000000000+0.5;return math.ldexp(ad,ac)*(type==2 and 1 or-1)else return a9(s)*(type==0 and 1 or-1)end end;local ae={2,6,22}local function af(s,ag)local w=C(s,2)if w==0 then return 1,C(s,ag)end;local ah=C(s,w*2)+ae[w]return ah,C(s,ag)end;local function ai(s,aj)local ak=C(s,4)if ak==0 then if C(s,1)==0 then return nil else return a9(s)end end;local al={}local _,am=0;for q=1,#aj do if _==0 then _,am=af(s,ak)end;if am>0 then al[#al+1]={s=aj[q],l=am}end;_=_-1 end;assert(_==0,_)table.sort(al,function(an,ao)if an.l==ao.l then return an.s<ao.s else return an.l<ao.l end end)al[1].c=0;for P=2,#al do al[P].c=bit32.lshift(al[P-1].c+1,al[P].l-al[P-1].l)end;local ap={}for P=1,#al do local am=al[P].c;local aq=ap;for ar=al[P].l-1,1,-1 do local _=bit32.extract(am,ar,1)if not aq[_+1]then aq[_+1]={}end;aq=aq[_+1]end;local _=bit32.extract(am,0,1)aq[_+1]=al[P].s end;return ap end;local function as(at)if at:sub(1,5)~="\27LuzQ"then error("invalid format",2)end;local self={buffer=at,position=6,bits=0,count=0}local au,av;do local R,v={},{}local aw,ax;repeat aw,ax=z(self,1),z(self,2)if not aw or not ax then break end;ax=ax==0 and a8(R,self)or ax==1 and a7(R,self)or ax==2 and Z(R,self)until aw==1;local J=#R;for q=1,J,4096 do v[#v+1]=f(unpack(R,q,h(q+4095,J)))end;au=g(v)if self.count%8>0 then r(self,self.count%8)end end;do local R,v={},{}local aw,ax;repeat aw,ax=z(self,1),z(self,2)if not aw or not ax then break end;ax=ax==0 and a8(R,self)or ax==1 and a7(R,self)or ax==2 and Z(R,self)until aw==1;local J=#R;for q=1,J,4096 do v[#v+1]=f(unpack(R,q,h(q+4095,J)))end;av=g(v)if self.count%8>0 then r(self,self.count%8)end end;local ay={}for az in av:gmatch"([%z\1-\62]+)\63"do ay[#ay+1]=az:gsub(".",p)end;local aA=ai(self,{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29})local ap=ai(self,{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29})local aB;if C(self,1)==1 then local aC,ad={},{}local function aD(aq)if type(aq)=="string"then aC[#aC+1],ad[aq]=aq,true else aD(aq[1])aD(aq[2])end end;aD(a)for q=0,29 do if not ad[":repeat"..q]then aC[#aC+1]=":repeat"..q end end;table.sort(aC)aB=ai(self,aC)else aB=a end;local aE,aF=1,1;local aG={}local aH={}while true do local aq=aB;while type(aq)=="table"do aq=aq[C(self,1)+1]end;if aq==":end"then break elseif aq==":name"then aq=ap;while type(aq)=="table"do aq=aq[C(self,1)+1]end;local aI,aJ=math.max(math.floor(aq/2)-1,0)if aI>0 then local aK=C(self,aI)aJ=bit32.bor(aK,bit32.lshift(bit32.band(aq,1)+2,aI))else aJ=aq end;if aJ==0 then aG[#aG+1]=ay[aF]table.insert(aH,1,ay[aF])aF=aF+1 else local aL=table.remove(aH,aJ)aG[#aG+1]=aL;table.insert(aH,1,aL)end elseif aq==":string"then local ag=a9(self)aG[#aG+1]=("%q"):format(au:sub(aE,aE+ag-1)):gsub("\\?\n","\\n"):gsub("\t","\\t"):gsub("[%z\1-\31\127-\255]",function(_)return("\\%03d"):format(_:byte())end)aE=aE+ag elseif aq==":number"then aG[#aG+1]=tostring(aa(self))elseif aq:find"^:repeat"then local aM=tonumber(aq:match"^:repeat(%d+)")local aI=math.max(math.floor(aM/2)-1,0)if aI>0 then local aK=C(self,aI)aM=bit32.bor(aK,bit32.lshift(bit32.band(aM,1)+2,aI))+3 else aM=aM+3 end;aq=aA;while type(aq)=="table"do aq=aq[C(self,1)+1]end;local aJ;aI=math.max(math.floor(aq/2)-1,0)if aI>0 then local aK=C(self,aI)aJ=bit32.bor(aK,bit32.lshift(bit32.band(aq,1)+2,aI))+1 else aJ=aq+1 end;for a4=1,aM do aG[#aG+1]=aG[#aG-aJ+1]end else aG[#aG+1]=aq end end;local aN,aO=false,false;local aP={}for a4,aQ in ipairs(aG)do if aN and aQ:match"^[A-Za-z0-9_]"or aO and aQ:match"^%."then aP[#aP+1]="\n"end;aP[#aP+1]=aQ;aN,aO=aQ:match"[A-Za-z0-9_]$",aQ:match"%.$"end;return table.concat(aP)end;return as
